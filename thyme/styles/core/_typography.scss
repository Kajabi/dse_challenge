////
/// Typography setup
///
/// @group thyme
////


// Font definitions
$-body-font-stack: "Inter", -apple-system, "BlinkMacSystemFont", "Segoe UI", "Roboto", "Helvetica Neue", "Arial", "Noto Sans", sans-serif;
$-body-margin-bottom: thyme-spacing(xs);
$-headings-margin-bottom: thyme-spacing(sm);


body:not(.thyme-excluded) {
  @include thyme-font-family();
}

.thyme-scoped {
  @include thyme-font-family();

  * {
    @include thyme-font-family();
  }
}

body:not(.thyme-excluded),
.thyme-scoped {
  text-rendering: optimizeLegibility;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
  text-size-adjust: 100%;
  color: map-get($thyme-text-colors, body);
  font-size: thyme-font-size();
}

// Automate setting up classes that extend the specs
@each $spec-name, $spec in $thyme-type-specs {
  .t-thyme-#{$spec-name} {
    @extend %t-thyme-#{$spec-name};
    color: inherit;
  }
}


// For simpler markup styling in blocks of CMS-like text, use this container
.thyme-type {

  // Body-like elements get spacing below
  > p:not([class]),
  > ul:not([class]),
  > ol:not([class]),
  > dl:not([class]),
  > [class*="t-thyme-body"] {
    @include thyme-block-spacing($-body-margin-bottom);
  }

  // Heading-like elements get spacing below as well
  > h1:not([class]),
  > h2:not([class]),
  > h3:not([class]),
  > h4:not([class]),
  > h5:not([class]),
  > h6:not([class]),
  > [class*="t-thyme-heading-"] {
    color: map-get($thyme-text-colors, heading);

    @include thyme-block-spacing($-headings-margin-bottom);
  }

  // Elements with no classes extend related type specs
  > h1:not([class]) {
    @extend %t-thyme-heading-1;
  }

  > h2:not([class]) {
    @extend %t-thyme-heading-2;

    &:not(:first-child) {
      margin-top: thyme-spacing(lg);
    }
  }

  > .t-thyme-heading-2:not(:first-child) {
    margin-top: thyme-spacing(lg);
  }

  > h3:not([class]) {
    @extend %t-thyme-heading-3;

    &:not(:first-child) {
      margin-top: thyme-spacing();
    }
  }

  > h4:not([class]) {
    @extend %t-thyme-heading-4;

    &:not(:first-child) {
      margin-top: thyme-spacing();
    }
  }

  > h5:not([class]) {
    @extend %t-thyme-heading-5;

    &:not(:first-child) {
      margin-top: thyme-spacing();
    }
  }

  > h6:not([class]) {
    @extend %t-thyme-heading-6;

    &:not(:first-child) {
      margin-top: thyme-spacing();
    }
  }

  > .t-thyme-heading-3,
  > .t-thyme-heading-4,
  > .t-thyme-heading-5,
  > .t-thyme-heading-6 {
    &:not(:first-child) {
      margin-top: thyme-spacing();
    }
  }

  > ul li:not([class]),
  > ol li:not([class]),
  > p:not([class]) {
    @extend %t-thyme-body;
  }

  // Hyperlinks get some default coloring applied
  > a:not([class]),
  > a[class*="thyme-link"] {
    color: thyme-color(primary);
  }

  > table:not(:last-child) {
    margin-top: thyme-spacing();
    margin-bottom: thyme-spacing();
  }
}


// Generate text color modifiers
@each $color-name, $color-slider in $thyme-colors {
  // Default color values
  $color-value: thyme-color($color-name);

  @if ($color-name == charcoal) {
    $color-value: thyme-color($color-name, 100);
  }

  @if ($color-name == grey) {
    $color-value: thyme-color($color-name, 500);
  }

  .t-thyme--color-#{"" + $color-name} {
    color: $color-value;
  }

  // Specific color values
  @each $-level, $-value in $color-slider {
    .t-thyme--color-#{"" + $color-name}-#{$-level} {
      color: thyme-color($color-name, $-level);
    }
  }
}

.t-thyme--align-center {
  text-align: center;
}

.t-thyme--align-right {
  text-align: right;
}

.t-thyme--align-justify {
  text-align: justify;
}

.t-thyme--strikethrough {
  text-decoration: line-through;
}

.t-thyme--truncate {
  @include truncate;
}
