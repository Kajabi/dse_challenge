////
/// Thyme mixins
///
/// @group thyme
////


///
/// Adds bottom margin or undoes bottom margin on `.no-margin-bottom` or `:last-child` elements of parent selector
///
/// @param {length} $block-spacing Amount of spacing to apply
///
@mixin thyme-block-spacing($block-spacing) {
  margin-bottom: $block-spacing;

  &.no-margin-bottom,
  &:last-child {
    margin-bottom: 0;
  }
}

///
/// Resets base button styles
///
@mixin thyme-button-style-reset {
  padding: 0;
  appearance: none;
  font-family: inherit;
  color: inherit;
  box-shadow: none;
  background-color: transparent;
  border: 0;
  cursor: pointer;
}

///
/// Button disabled mixin that sets up disabled styles for buttons
///
@mixin thyme-button-style-disabled {
  box-shadow: none;
  transition: none;
  cursor: not-allowed;
  pointer-events: none;

  &:hover:not(:focus):not(:active):not(:disabled):not([aria-disabled="true"]),
  &:focus,
  &:active {
    outline: none;
  }
}

///
/// Sets up styles for thyme "copy" (system) text.
///
@mixin thyme-copy-text() {
  @extend %t-thyme-body;

  @include truncate();

  padding: rem(6px) thyme-spacing(sm);
  color: thyme-color(charcoal, 400);
  background-color: transparent;
  border: $-copy-text-border;
  border-radius: thyme-border(radius);
}

///
/// Generates icon variations for buttons
///
/// @param {string} $icon-name Name of the icon from the system icon library
/// @param {string} $icon-code They code form of the icon
/// @param {string(left|right|only)} $direction An inline direction indicator
///
@mixin thyme-button-icon-generator($icon-name, $icon-code, $direction) {
  // --- Right Icon Buttons
  @if $direction == right {
    .thyme-btn--icon-right-#{$icon-name} {
      flex-direction: row-reverse;

      &::before {
        @include thyme-icon-base($icon-name, md);

        align-self: center;
        margin-left: thyme-spacing(xs);
        padding: var(--icon-block-padding) 0;
      }
    }
  }

  // --- Left Icon Buttons
  @else if $direction == left {
    .thyme-btn--icon-left-#{$icon-name} {
      flex-direction: row;

      &::before {
        @include thyme-icon-base($icon-name);

        align-self: center;
        margin-right: thyme-spacing(xs);
        padding: var(--icon-block-padding) 0;
      }
    }
  }

  // --- Standalone Icon Buttons
  @else if $direction == only {
    .thyme-btn--icon-only-#{$icon-name} {
      justify-content: center;
      text-align: center;

      &:not(.thyme-btn--subtle) {
        padding: rem(6px) rem(10px);
      }

      &::before {
        @include thyme-icon-base($icon-name);

        align-self: center;
        padding: var(--icon-block-padding) 0;
      }
    }
  }
}

///
/// Sets a Thyme-style custom focus outline to an interactive element.
/// Should be paired with `thyme-focus-outline--update-color`
///
/// @param {length} $outline-width [2px] Thickness of the focus ring itself
/// @param {length} $outline-offset-block [4px] How far the focus ring is offset from the object on the y axis (block)
/// @param {length} $outline-offset-inline [4px] How far the focus ring is offset from the object on the x axis (inline)
/// @param {time} $outline-animation-speed [0.2s] How quickly the focus ring animates on activation
///
@mixin thyme-focus-outline(
  $outline-width: 2px,
  $outline-offset-block: 2px,
  $outline-offset-inline: 2px,
  $outline-animation-speed: 0.2s
) {
  position: relative;

  &:focus,
  &:focus-within {
    outline: none;
  }

  &::after {
    $-offset-block: $outline-width * 2 + $outline-offset-block * 2;
    $-offset-inline: $outline-width * 2 + $outline-offset-inline * 2;

    content: "";
    z-index: thyme-z-index(default, 1);
    position: absolute;
    left: 50%;
    top: 50%;
    transform: translate3d(-50%, -50%, 0) scale(0.94);
    width: calc(100% + #{$-offset-inline});
    height: calc(100% + #{$-offset-block});
    border: $outline-width solid transparent;
    border-radius: thyme-border(radius-large);
    transition:
      opacity ($outline-animation-speed * 0.75) ease-out ($outline-animation-speed * 0.25),
      transform $outline-animation-speed ease-in-out;
    pointer-events: none;
    opacity: 0;
    will-change: transform;
  }

  &:focus:not(:disabled):not([aria-disabled="true"]),
  &:active:not(:disabled):not([aria-disabled="true"]) {
    &::after {
      transform: translate3d(-50%, -50%, 0) scale(1);
      opacity: 1;
    }
  }
}

///
/// Sets the background-color focus outline to an interactive element's parent.
///
/// @param {color} $focus-within-background-color Hex color to be used for the background-color
///
@mixin thyme-focus-outline--focus-within($focus-within-background-color: thyme-color(primary, 100)) {
  &:focus-within:not(:disabled):not([aria-disabled="true"]) {
    background-color: $focus-within-background-color;
  }
}

///
/// Sets the color custom focus outline to an interactive element.
/// Can be used both for the initial setting and for a modified setting for a particular state.
///
/// @param {color} $color Hex color to be used for the stroke color
///
@mixin thyme-focus-outline--update-color($outline-color) {
  &::after {
    border-color: $outline-color;
  }
}

///
/// Adds the basic default card setup including grid, spacing, and border treatment
///
@mixin thyme-card($grid: true) {
  @if ($grid) {
    @include thyme-grid-card();
  }

  padding: thyme-spacing(card);
  border: thyme-border();
  border-radius: thyme-border(radius);
}

///
/// Adds the appearance of a dashed border on an element using a url-encoded SVG shape as a background image.
///
/// @param {number} $thickness [1] unitless number for thickness of the stroke
/// @param {color} $color [thyme-color(grey, 400)] hex color to be used for the stroke color
/// @param {number} $dash [4.5] unitless number for the size of a dash
/// @param {number} $gap [4.5] unitless number for the size of a gap between dashes
/// @param {number} $offset [4.5] unitless number for the initial offset for the starting point of the dash; typically matches a dash size
/// @param {number} $border-radius [4] unitless number for the border radius of the shape
///
@mixin thyme-dashed-border($thickness: 1, $color: thyme-color(grey, 400), $dash: 4.5, $gap: 4.5, $offset: 4.5, $border-radius: 4) {
  $stripped-color-value: str-replace("#{$color}", "#", "%23");
  background-image: url("data:image/svg+xml,%3csvg width='100%25' height='100%25' xmlns='http://www.w3.org/2000/svg'%3e%3crect width='100%25' height='100%25' fill='none' rx='#{$border-radius}' ry='#{$border-radius}' stroke='#{$stripped-color-value}' stroke-width='#{$thickness * 2}' stroke-dasharray='#{$dash}%2c#{$gap + $thickness * 4}' stroke-dashoffset='#{$offset}' stroke-linecap='square'/%3e%3c/svg%3e");
}

///
/// Sets up a grid stack that uses card-scoped spacing (16px)
///
@mixin thyme-grid-card() {
  display: grid;
  gap: thyme-spacing(sm);
  grid-template-rows: min-content;
}

///
/// Sets up a generic content stack that uses standard stack spacing (8px)
///
@mixin thyme-grid-stack() {
  display: grid;
  gap: thyme-spacing(xs);
  grid-template-columns: 100%;
  grid-template-rows: min-content;
  justify-items: start;
}

///
/// Sets up a grid stack that uses panel-scoped spacing (24px)
///
@mixin thyme-grid-panel() {
  display: grid;
  gap: thyme-spacing(panel);
  grid-template-columns: 100%;
  grid-template-rows: min-content;
}

///
/// Standard grid setup for a single row layout in the card spacing scope (16px).
/// Typically used in combination with a grid template.
/// Adjusts to a wrapping flex layout below the `min` breakpoint.
///
@mixin thyme-grid-card-row() {
  justify-content: space-between;
  align-items: center;
  gap: thyme-spacing(card);

  @media (max-width: thyme-breakpoint(sm-max)) {
    display: flex;
    flex-flow: row wrap;
  }

  @media (min-width: thyme-breakpoint(md-min)) {
    display: grid;
    grid-auto-columns: auto;
    grid-auto-flow: column;
  }
}

///
/// Standard grid setup for a single row layout in the panel spacing scope (24px).
/// Typically used in combination with a grid template.
/// Adjusts to a wrapping flex layout below the `min` breakpoint.
///
@mixin thyme-grid-panel-row() {
  justify-content: space-between;
  align-items: center;
  gap: thyme-spacing();

  @media (max-width: thyme-breakpoint(sm-max)) {
    display: flex;
    flex-flow: row wrap;
  }

  @media (min-width: thyme-breakpoint(md-min)) {
    display: grid;
    grid-auto-columns: auto;
    grid-auto-flow: column;
  }
}

///
/// Adds the basic default form spacing, and border treatment
///
@mixin thyme-form-field-group() {
  display: flex;
  position: relative;
  flex-direction: column;

  &:not(:last-child) {
    margin-bottom: thyme-spacing();
  }

  .thyme-panel-grid > &,
  .thyme-panel__row > &,
  .thyme-panel__stack > &,
  .thyme-panel__block > &,
  .thyme-card-grid > &,
  .thyme-card__row > &,
  .thyme-card__stack > &,
  .thyme-card__block > & {
    margin-bottom: 0;
  }
}

///
/// Adds the basic default form spacing, and border treatment
///
@mixin thyme-form-field() {
  width: 100%;
  padding: thyme-spacing(sm) thyme-spacing(sm);
  color: thyme-color(charcoal);
  appearance: none;
  border: rem(1px) solid thyme-color(grey, 300);
  border-radius: thyme-border(radius);
  background: transparent;
  transition: border 0.2s ease-in-out, box-shadow 0.2s ease-in-out;

  @include placeholder {
    color: thyme-color(charcoal, 100);
  }

  &:hover:not(:disabled) {
    border-color: currentColor;
  }

  &:focus:not(:disabled),
  &:active:not(:disabled) {
    outline: none;
    border-color: thyme-color(primary);
    box-shadow: 0 0 0 rem(1px) thyme-color(primary);

    @include placeholder {
      opacity: 0;
    }

    ~ label {
      color: thyme-color(primary);
    }
  }

  &:valid:not(:placeholder-shown) {
    outline: none;
    background: transparent; // Prevent some browsers from coloring the background on 'valid'

    @include placeholder {
      opacity: 0;
    }
  }

  &:disabled {
    color: thyme-color(grey, 400);
    background-color: thyme-color(grey, 100);
    cursor: not-allowed;
    resize: none;

    @include placeholder {
      color: thyme-color(grey, 400);
    }

    .thyme-form-field--showplaceholder & ~ label {
      opacity: 0.5;
    }
  }

  ~ label {
    @extend %t-thyme-body-xsmall-semi;

    position: absolute;
    padding-left: rem(4px);
    padding-right: rem(4px);
    color: inherit;
    font-weight: thyme-font-weight(semibold);
    white-space: nowrap;
    background-color: thyme-color(white);
    pointer-events: none;
    opacity: 0;
  }

  // TODO: add support for Simpleform classes
  .thyme-form-field--error &,
  .thyme-form-field--error &:focus:not(:disabled),
  .thyme-form-field--error &:not(:placeholder-shown),
  .thyme-form-field--error &:required:not(:placeholder-shown):not(:valid) {
    border-color: thyme-color(red);
    box-shadow: 0 0 0 rem(1px) thyme-color(red);

    ~ label {
      color: thyme-color(red);
    }
  }

  @media (prefers-reduced-motion: reduce) {
    &,
    ~ label {
      transition: none !important; /* stylelint-disable-line declaration-no-important */
    }
  }
}

///
/// Adds layout styles for form input icon container. This is used for a
/// static icon and popover icon placement.
///
@mixin thyme-form-field-icon() {
  display: flex;
  align-items: center;
  justify-content: center;
  position: absolute;
  right: 0;
  top: 0;
  height: rem(40px);
  width: rem(40px);
}

///
/// Adds the basic default form label spacing, and border treatment
///
@mixin thyme-form-field-label() {
  @extend %t-thyme-body-xsmall-semi;

  position: absolute;
  color: inherit;
  white-space: nowrap;
  background-color: thyme-color(white);
  pointer-events: none;
  opacity: 0;

  @media screen and (min-width: thyme-breakpoint(sm-min)) {
    white-space: normal;
  }
}

///
/// Adds the basic default styling for floating input labels
///
@mixin thyme-form-field-floating-label(
  $textarea: false,
  $input-text-height: thyme-spacing(sm),
  $input-padding: thyme-spacing(2xs),
  $textarea-label-padding: rem(3px),
  $textarea-padding: thyme-spacing(sm)
) {
  @if ($textarea == true) {
    transform: translateY($textarea-label-padding - $textarea-padding);
  }
  @else {
    transform: translateY(calc(-50% - (#{$input-text-height} + #{$input-padding}))); // we calculate the centered position minus the offset of the text height plus the spacing height
  }
  transition: opacity 0.1s ease-in, transform 0.15s ease-in-out, color 0.15s ease-out;
  opacity: 1;
}

///
/// Adds the basic default form field message font sizing and color treatment
///
@mixin thyme-form-field-message() {
  @extend %t-thyme-body-xsmall;

  margin-top: thyme-spacing(xs);
  padding-left: thyme-spacing(sm);
  color: thyme-color(charcoal, 100);

  .thyme-form-field--error & {
    color: thyme-color(red);

    &::before {
      @include thyme-icon-base(danger, md);

      position: relative;
      top: 3px;
      padding-right: thyme-spacing(xs);
    }
  }
}

///
/// Mixins for common styles between the form toggles Radio, Checkbox, and Switch
///
@mixin thyme-form-toggle() {
  display: flex;
  flex-flow: row wrap;
  align-items: flex-start;
  margin-bottom: thyme-spacing(card);
}

@mixin thyme-form-toggle-parents() {
  .thyme-panel-grid > &,
  .thyme-panel__row > &,
  .thyme-panel__stack > &,
  .thyme-panel__block > &,
  .thyme-card-grid > &,
  .thyme-card__row > &,
  .thyme-card__stack > &,
  .thyme-card__block > & {
    margin-bottom: 0;
    @content;
  }
}

@mixin thyme-form-toggle-input() {
  appearance: none;
  display: inline-block;
  position: relative;
  vertical-align: top;
  cursor: pointer;
}

@mixin thyme-form-toggle-label() {
  @extend %t-thyme-body;

  display: inline-block;
  flex: 1;
  margin-left: thyme-spacing(xs);
  vertical-align: top;
  cursor: pointer;
}

@mixin thyme-form-toggle-message() {
  @extend %t-thyme-body-xsmall;

  position: relative;
  z-index: thyme-z-index(default);
  width: 100%;
  color: thyme-color(charcoal, 200);
}

///
/// Sets up an element to implement the thyme icon font and basic settings related
/// to displaying the icon. Usually implemented on a pseudo-element.
///
/// If an `$icon` is passed in this mixin also displays the icon as content for the element.
///
/// @param {string | null} $icon [null] The alias from the icon library for the icon to use
/// @param {string} $icon [md] The code for the desired spacing size from the `thyme-icon-sizes` token
///
@mixin thyme-icon-base($icon: null, $icon-size: md) {
  $size: map-get($thyme-icon-sizes, $icon-size);

  display: inline-flex;
  box-sizing: content-box;
  width: $size;
  height: $size;
  text-transform: none;
  font-family: "Thyme";
  font-size: $size;
  font-style: normal;
  font-weight: normal;
  line-height: $size;
  speak: never;

  /* Better Font Rendering =========== */
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;

  @if ($icon) {
    content: thyme-icon($icon);
  }
}

///
/// Adds the basic default panel setup including grid, spacing, and border treatment
///
@mixin thyme-panel() {
  padding: thyme-spacing(panel);
  background-color: thyme-color(white);
  border-radius: thyme-border(radius-large);
  box-shadow: thyme-shadow(sm);
}

///
/// Adds an tab-styled underline that animates in and out when active class is toggled
///
/// @param {string} $active-class [".thyme-tab--active"] class for an active state on the elememnt
///
@mixin thyme-tab-underline($active-class: ".thyme-tab--active") {
  $item-underline: "after";

  &::#{$item-underline} {
    $spacing-off: 50%;

    content: "";
    position: absolute;
    right: $spacing-off;
    bottom: 0;
    left: $spacing-off;
    height: map-get($thyme-active-underline-configs, height);
    background: map-get($thyme-active-underline-configs, color);
    border-radius: map-get($thyme-active-underline-configs, radius);
    transition: right map-get($thyme-transitions, default), left map-get($thyme-transitions, default);
  }

  &:focus::#{$item-underline} {
    left: 0;
    right: 0;
  }

  &:active,
  &#{$active-class} {
    &::#{$item-underline} {
      left: 0;
      right: 0;
    }
  }
}

///
/// Adds the default font family
///
@mixin thyme-font-family() {
  font-family: $-body-font-stack;

  @supports (font-variation-settings: normal) {
    font-family: "Inter var", $-body-font-stack;
  }
}
